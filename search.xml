<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浏览器垃圾回收</title>
      <link href="posts/bf01.html"/>
      <url>posts/bf01.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是垃圾数据"><a href="#什么是垃圾数据" class="headerlink" title="什么是垃圾数据"></a>什么是垃圾数据</h2><hr><p>我们在写 js 代码的时候，会频繁地操作数据。</p><p>在一些数据不被需要的时候，它就是垃圾数据，垃圾数据占用的内存就应该被回收。</p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><hr><p>从根节点出发将可到达的对象标记，最后一起移除未标记的。</p><h3 id="第一步：标记空间中「可达」值"><a href="#第一步：标记空间中「可达」值" class="headerlink" title="第一步：标记空间中「可达」值"></a>第一步：标记空间中「可达」值</h3><p>V8 采用的是可达性(reachability)算法来判断堆中的对象应不应该被回收。</p><p>这个算法思路是这样的：</p><ul><li>从根节点（root）出发，遍历所有的对象；</li><li>可以遍历到的对象，是可达的（reachable）；</li><li>没有被遍历的对象，是不可达的（unreachable）</li></ul><p>在浏览器环境下，根节点有很多，主要包括这几种：</p><ul><li>全局变量 window ，位于每个 iframe 中</li><li>文档 DOM 树</li><li>存放在栈上的变量</li><li>…</li></ul><p>这些根节点不是垃圾，不可能被回收。</p><h3 id="第二步：回收「不可达」的对象所占据的内存"><a href="#第二步：回收「不可达」的对象所占据的内存" class="headerlink" title="第二步：回收「不可达」的对象所占据的内存"></a>第二步：回收「不可达」的对象所占据的内存</h3><p>在所有的标记完成之后，统一清理内存中所有不可达的对象。</p><h3 id="第三部：内存整理"><a href="#第三部：内存整理" class="headerlink" title="第三部：内存整理"></a>第三部：内存整理</h3><ul><li>频繁回收对象后，内存中就会出现大量不连续空间，专业名词叫「内存碎片」。</li><li>当内存中存在大量内存碎片时，如果需要分配较大的连续内存时，就有可能出现内存不足的情况。</li><li>所以最后一步就是真理内存碎片。</li></ul><h2 id="什么时候垃圾回收？"><a href="#什么时候垃圾回收？" class="headerlink" title="什么时候垃圾回收？"></a>什么时候垃圾回收？</h2><p>浏览器进行垃圾回收的时候，会暂停js脚本的运行，等垃圾回收完毕再继续执行。</p><p>对于普通应用这样没什么问题，当对于 js 游戏、动画连贯性要求较高的应用，如果暂停时间过长就回造成页面卡顿。</p><p>接下来主要就是谈一谈什么时候进行垃圾回收，可以避免长时间暂停。</p><h3 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h3><p>浏览器将数据分为两种，一种是「临时」对象，一种是「长久」对象。</p><p>临时对象：</p><ul><li>大部分对象在内存中存活的时间很短。</li><li>比如函数内部声明的变量，或者块级作用域中的变量。当函数或者代码块执行结束之后，作用域中定义的变量就会被销毁。</li><li>这类对象很快就变得不可访问，应该快点回收。</li></ul><p>长久对象：</p><ul><li>生命周期很长的对象，比如全局的 window、DOM、API 等</li><li>这类对象可以慢点回收。</li></ul><p>这两种对象对应不同的回收策略，所以，V8 把堆分为新生代和老生代两个区域，新生代存放临时对象，老生代存放长久对象。</p><p>并且让副垃圾回收器、主垃圾回收器分别负责新生代和老生代的垃圾回收。</p><p>这样就可以高效的实现垃圾回收了。</p><h4 id="主垃圾回收"><a href="#主垃圾回收" class="headerlink" title="主垃圾回收"></a>主垃圾回收</h4><p>负责老生代的垃圾回收，有两个特点：</p><ol><li>对象占用空间大；</li><li>对象存活时间长</li></ol><p>它使用「标记-清除」的算法之行垃圾回收。</p><ol><li>首先是标记。<ul><li>从一组根元素开始，递归遍历这组根元素。</li><li>在遍历过程中，能到达的元素称为活动对象，没有到达的元素就可以判断为垃圾数据。</li></ul></li><li>垃圾清除<ul><li>直接将标记为垃圾的数据清理掉。</li></ul></li><li>多次标记-清除后，会产生大量不连续的内存碎片，需要进行内存整理。</li></ol><h4 id="副垃圾回收"><a href="#副垃圾回收" class="headerlink" title="副垃圾回收"></a>副垃圾回收</h4><p>负责新生代的垃圾回收，通常只支持 1～8M 的容量。</p><p>新生代被分为两个区域：对象区域、空闲区域。</p><p><img src="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/49783ce34f49f645027de91c76ea33bb-801-540.png" alt="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/49783ce34f49f645027de91c76ea33bb-801-540.png"></p><p>新加入的对象都被放入对象区域，等对象区域快满的时候，会执行一次垃圾清理。</p><ol><li>先给对象区域所有垃圾做标记；</li><li>标记完成后，存活的对象被复制到空闲区域，并且将他们有序的排列一遍；副垃圾回收器没有碎片整理。因为空闲区域里此时是有序的，没有碎片，也就不需要整理了。</li></ol><p><img src="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/7c2489718835513e9073b2cd95b8104f-1011-565.png" alt="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/7c2489718835513e9073b2cd95b8104f-1011-565.png"></p><ol start="3"><li>复制完成后，对象区域会和空闲区域进行对调。将空闲区域中存活的对象放入对象区域里。</li></ol><p><img src="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/28be1571cfaebe313b2866b8126c73c7-3034-1697.png" alt="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/28be1571cfaebe313b2866b8126c73c7-3034-1697.png"></p><p>因为副垃圾回收器操作比较频繁，所以为了执行效率，一般新生区的空间会被设置得比较小。</p><p>一旦检测到空间装满了，就执行垃圾回收。</p><h3 id="分代收集-1"><a href="#分代收集-1" class="headerlink" title="分代收集"></a>分代收集</h3><p>一句话总结分代回收就是：将堆分为新生代与老生代，多回收新生代，少回收老生代。</p><p>这样就减少了每次需遍历的对象，从而减少每次垃圾回收的耗时。</p><p><img src="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/79a9d0cd771bb62af60afead226e09d4-1229-457.png" alt="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/79a9d0cd771bb62af60afead226e09d4-1229-457.png"></p><h3 id="增量收集"><a href="#增量收集" class="headerlink" title="增量收集"></a>增量收集</h3><p>如果脚本中有许多对象，引擎一次性遍历整个对象，会造成一个长时间暂停。</p><p>所以引擎将垃圾收集工作分成更小的块，每次处理一部分，多次处理。</p><p>这样就解决了长时间停顿的问题。</p><p><img src="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/a2f7f924790816a3fc26c13589e244f9-1229-311.png" alt="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/a2f7f924790816a3fc26c13589e244f9-1229-311.png"></p><h3 id="闲时收集"><a href="#闲时收集" class="headerlink" title="闲时收集"></a>闲时收集</h3><p>垃圾收集器只会在 CPU 空闲时尝试运行，以减少可能对代码执行的影响。</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发过程中遇到的一些问题及解决方案 --- 浏览器</title>
      <link href="posts/6c2b.html"/>
      <url>posts/6c2b.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-浏览器返回上一级，页面数据不刷新问题"><a href="#1-浏览器返回上一级，页面数据不刷新问题" class="headerlink" title="1. 浏览器返回上一级，页面数据不刷新问题"></a>1. 浏览器返回上一级，页面数据不刷新问题</h2><h4 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a><strong>原因分析：</strong></h4><p>由于浏览器自带的缓存机制，会解决我们很多服务器压力，极大减少 http 请求。比如下图</p><p><img src="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/808987714e6b9eb2ff8bf8fe5af8577d-468-197.png" alt="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/808987714e6b9eb2ff8bf8fe5af8577d-468-197.png"></p><p><code>disk cache(磁盘缓存)</code> 和 <code>memory cache(内存缓存)</code>都属于强缓存。</p><p>强缓存作为性能优化中缓存方面最有效的手段，能够极大的提升性能。由于强缓存不会向服务端发送请求，对服务端的压力也是大大减小。</p><p>这两种强缓存区别主要在于提取速度上，memory cache 要比 disk cache 快的多，看使用情景。</p><ul><li><code>200 from memory cache</code>：不访问服务器，一般已经加载过该资源且缓存在了内存当中，直接从内存中读取缓存。浏览器关闭后，数据将不存在（资源被释放掉了），再次打开相同的页面时，不会出现from memory cache。</li><li><code>200 from disk cache</code>：不访问服务器，已经在之前的某个时间加载过该资源，直接从硬盘中读取缓存，关闭浏览器后，数据依然存在，此资源不会随着该页面的关闭而释放掉下次打开仍然会是from disk cache。</li><li><code>304 Not Modified</code>：访问服务器，发现数据没有更新，服务器返回此状态码。然后从缓存中读取数据。</li></ul><p>但是我们也会在某种情况下不需要这种缓存机制，那么我们就需要使用下面的两种方式来解决这个问题：</p><h4 id="问题1：-通过-js-返回上一级页面，页面数据不更新的问题。"><a href="#问题1：-通过-js-返回上一级页面，页面数据不更新的问题。" class="headerlink" title="问题1： 通过 js 返回上一级页面，页面数据不更新的问题。"></a><strong>问题1：</strong> 通过 js 返回上一级页面，页面数据不更新的问题。</h4><p>比如：A 页面为详情页面，B 页面为编辑页面，当 B 页面编辑成功之后 js 触发返回 A 页面时，A 页面还是老数据</p><p>解决方案：</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> document<span class="token punctuation">.</span>referrer</code></pre><h4 id="问题2：-通过浏览器返回上一级页面，页面数据不更新的问题。"><a href="#问题2：-通过浏览器返回上一级页面，页面数据不更新的问题。" class="headerlink" title="问题2： 通过浏览器返回上一级页面，页面数据不更新的问题。"></a><strong>问题2：</strong> 通过浏览器返回上一级页面，页面数据不更新的问题。</h4><p>解决方案：在 A 页面添加监听事件，通过对 pageshow 监听，实现页面 reload</p><pre class=" language-jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pageshow'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>persisted <span class="token operator">||</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动手实现 Promise/A+ 完成官方测试用例</title>
      <link href="posts/aef3.html"/>
      <url>posts/aef3.html</url>
      
        <content type="html"><![CDATA[<h2 id="动手实现-Promise-A-完成官方测试用例"><a href="#动手实现-Promise-A-完成官方测试用例" class="headerlink" title="动手实现 Promise/A+ 完成官方测试用例"></a>动手实现 Promise/A+ 完成官方测试用例</h2><hr><h3 id="前言✨"><a href="#前言✨" class="headerlink" title="前言✨"></a>前言✨</h3><p><code>Promise</code> 几乎是面试必考点，所以我们不能仅仅会用，还得知道他的底层原理，学习他原理的最好方法就是自己也实现一个 <code>Promise</code> 。所以本文会自己实现一个遵循 <code>Promise/A+</code> 规范的 <code>Promise</code> 。实现之后，我们还要用 <code>Promise/A+</code> 官方的测试工具来测试下我们的实现是否正确，这个工具总共有872个测试用例，全部通过才算是符合 <code>Promise/A+</code> 规范，下面是他们的链接：</p><ul><li>Promise/A+ 规范：<a href="https://github.com/promises-aplus/promises-spec">https://github.com/promises-aplus/promises-spec</a></li><li>Promise/A+测试工具：<a href="https://github.com/promises-aplus/promises-tests">https://github.com/promises-aplus/promises-tests</a></li></ul><h3 id="Promise-用法✨"><a href="#Promise-用法✨" class="headerlink" title="Promise 用法✨"></a>Promise 用法✨</h3><p><code>Promise</code> 的基本用法，网上有很多，我这里简单提一下，我还是用三个相互依赖的网络请求做例子，假如我们有三个网络请求，请求2必须依赖请求1的结果，请求3必须依赖请求2的结果，如果用回调的话会有三层，会陷入“回调地狱”，用 <code>Promise</code> 就清晰多了：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 我们先用Promise包装下三个网络请求</span><span class="token comment" spellcheck="true">// 请求成功时resolve这个Promise</span><span class="token keyword">const</span> request1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'request1 success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> request2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'request2 success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> request3 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'request3 success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 先发起request1，等他resolve后再发起request2，</span><span class="token comment" spellcheck="true">// 然后是request3</span><span class="token function">request1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">request2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">request3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>上面的例子里面，then是可以链式调用的，后面的then可以拿到前面resolve出来的数据，我们控制台可以看到三个success依次打出来：</p><p><img src="https://user-gold-cdn.xitu.io/2020/4/7/1715293f7a304899?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="https://user-gold-cdn.xitu.io/2020/4/7/1715293f7a304899?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><h3 id="Promises-A-规范✨"><a href="#Promises-A-规范✨" class="headerlink" title="Promises/A+ 规范✨"></a>Promises/A+ 规范✨</h3><p>通过上面的例子，其实我们已经知道了一个 promise 长什么样子，<code>Promises/A+</code> 规范其实就是对这个长相进一步进行了规范。下面我会对这个规范进行一些讲解。</p><ul><li>promise：是一个拥有 <code>then</code> 方法的对象或函数，其行为符合本规范</li><li>thenable：是一个定义了 <code>then</code> 方法的对象或函数。这个主要是用来兼容一些老的 <code>Promise</code> 实现，只要一个Promise实现是 <code>thenable</code> ，也就是拥有then方法的，就可以跟 <code>Promises/A+</code> 兼容。</li><li>value：指 <code>reslove</code> 出来的值，可以是任何合法的JS值(包括 undefined , thenable 和 promise等)</li><li>exception：异常，在 <code>Promise</code> 里面用 <code>throw</code> 抛出来的值</li><li>reason：拒绝原因，是 <code>reject</code> 里面传的参数，表示 <code>reject</code> 的原因<br>注意这里的不可变指的是===，也就是说，如果 <code>value</code> 或者 <code>reason</code> 是对象，只要保证引用不变就行，规范没有强制要求里面的属性也不变。 <code>Promise</code> 状态其实很简单，画张图就是：</li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/4/7/1715294466346d7a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="https://user-gold-cdn.xitu.io/2020/4/7/1715294466346d7a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><h3 id="then-方法✨"><a href="#then-方法✨" class="headerlink" title="then 方法✨"></a>then 方法✨</h3><p>一个 <code>promise</code> 必须拥有一个 <code>then</code> 方法来访问他的值或者拒绝原因。 <code>then</code> 方法有两个参数：</p><pre class=" language-js"><code class="language-js">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span></code></pre><p><code>then</code> 方法必须返回一个 <code>promise</code> 对象。</p><pre class=" language-js"><code class="language-js">promise2 <span class="token operator">=</span> promise1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><ul><li>如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 返回一个值 x ，则运行 <code>Promise</code> 解决过程：<code>[[Resolve]](promise2, x)</code></li><li>如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 抛出一个异常 e ，则 <code>promise2</code> 必须拒绝执行，并返回拒因 e</li><li>如果 <code>onFulfilled</code> 不是函数且 <code>promise1</code> 成功执行， <code>promise2</code> 必须成功执行并返回相同的值</li><li>如果 <code>onRejected</code> 不是函数且 <code>promise1</code> 拒绝执行， <code>promise2</code> 必须拒绝执行并返回相同的据因</li></ul><p>规范里面还有很大一部分是讲解Promise 解决过程的，光看规范，很空洞，前面这些规范已经可以指导我们开始写一个自己的Promise了，Promise 解决过程会在我们后面写到了再详细讲解。</p><h3 id="实现-Promise✨"><a href="#实现-Promise✨" class="headerlink" title="实现 Promise✨"></a>实现 Promise✨</h3><p>我们自己要写一个Promise，肯定需要知道有哪些工作需要做，我们先从Promise的使用来窥探下需要做啥：</p><blockquote><ul><li>新建Promise需要使用new关键字，那他肯定是作为面向对象的方式调用的，Promise是一个类。关于JS的面向对象更详细的解释可以看这篇文章。</li><li>我们new Promise(fn)的时候需要传一个函数进去，说明Promise的参数是一个函数</li><li>构造函数传进去的fn会收到resolve和reject两个函数，用来表示Promise成功和失败，说明构造函数里面还需要resolve和reject这两个函数，这两个函数的作用是改变Promise的状态。</li><li>根据规范，promise有pending，fulfilled，rejected三个状态，初始状态为pending，调用resolve会将其改为fulfilled，调用reject会改为rejected。</li><li>promise实例对象建好后可以调用then方法，而且是可以链式调用then方法，说明then是一个实例方法。链式调用的实现这篇有详细解释，我这里不再赘述。简单的说就是then方法也必须返回一个带then方法的对象，可以是this或者新的promise实例。</li></ul></blockquote><h4 id="第一步：构造函数-✍️"><a href="#第一步：构造函数-✍️" class="headerlink" title="第一步：构造函数 ✍️"></a>第一步：构造函数 ✍️</h4><p>【注】为了更好的兼容性，本文就不用ES6了。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 先定义三个常量表示状态</span><span class="token keyword">var</span> PENDING <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span><span class="token keyword">var</span> FULFILLED <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span><span class="token keyword">var</span> REJECTED <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> PENDING<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始状态为pending</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化value</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 初始化reason</span><span class="token punctuation">}</span></code></pre><h4 id="第二步：resolve-和-reject-方法-✍️"><a href="#第二步：resolve-和-reject-方法-✍️" class="headerlink" title="第二步：resolve 和 reject 方法 ✍️"></a>第二步：resolve 和 reject 方法 ✍️</h4><p>根据规范，<code>resolve</code> 方法是将状态改为 <code>fulfilled</code>，<code>reject</code> 是将状态改为 <code>rejected</code>。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这两个方法直接写在构造函数里面</span><span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...省略前面代码...</span>  <span class="token comment" spellcheck="true">// 存一下this,以便resolve和reject里面访问</span>  <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// resolve方法参数是value</span>  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      that<span class="token punctuation">.</span>status <span class="token operator">=</span> FULFILLED<span class="token punctuation">;</span>      that<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// reject方法参数是reason</span>  <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      that<span class="token punctuation">.</span>status <span class="token operator">=</span> REJECTED<span class="token punctuation">;</span>      that<span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="第三步：调用构造函数参数-✍️"><a href="#第三步：调用构造函数参数-✍️" class="headerlink" title="第三步：调用构造函数参数 ✍️"></a>第三步：调用构造函数参数 ✍️</h4><p>最后将 <code>resolve</code> 和 <code>reject</code> 作为参数调用传进来的参数，记得加上 <code>try</code> ，如果捕获到错误就 <code>reject</code> 。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...省略前面代码...</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token function">fn</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="第四步：then-方法-✍️"><a href="#第四步：then-方法-✍️" class="headerlink" title="第四步：then 方法 ✍️"></a>第四步：then 方法 ✍️</h4><p>根据我们前面的分析，then 方法可以链式调用，所以他是实例方法，而且规范中的 API 是 <code>promise.then(onFulfilled, onRejected)</code> ，我们先把架子搭出来：</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>那 then 方法里面应该干什么呢，其实规范也告诉我们了，先检查 <code>onFulfilled</code> 和 <code>onRejected</code> 是不是函数，如果不是函数就忽略他们，所谓“忽略”并不是什么都不干，对于 <code>onFulfilled</code> 来说“忽略”就是将 <code>value</code> 原封不动的返回，对于 <code>onRejected</code> 来说就是返回 <code>reason</code>， <code>onRejected</code> 因为是错误分支，我们返回 reason 应该 throw 一个 <code>Error</code>：</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果onFulfilled不是函数，给一个默认函数，返回value</span>  <span class="token keyword">var</span> realOnFulfilled <span class="token operator">=</span> onFulfilled<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> realOnFulfilled <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    realOnFulfilled <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果onRejected不是函数，给一个默认函数，返回reason的Error</span>  <span class="token keyword">var</span> realOnRejected <span class="token operator">=</span> onRejected<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> realOnRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    realOnRejected <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> reason<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>参数检查完后就该干点真正的事情了，想想我们使用 <code>Promise</code> 的时候，如果 <code>promise</code> 操作成功了就会调用 <code>then</code> 里面的 <code>onFulfilled</code> ，如果他失败了，就会调用 <code>onRejected</code> 。对应我们的代码就应该检查下 <code>promise</code> 的 <code>status</code> ，如果是 <code>FULFILLED</code> ，就调用 <code>onFulfilled</code> ，如果是 <code>REJECTED</code> ，就调用 <code>onRejected</code> :</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...省略前面代码...</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULFILLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再想一下，我们新建一个promise的时候可能是直接这样用的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码 <code>then</code> 是在实例对象一创建好就调用了，这时候 <code>fn</code> 里面的异步操作可能还没结束呢，也就是说他的 <code>status</code> 还是 <code>PENDING</code> ，这怎么办呢，这时候我们肯定不能立即调 <code>onFulfilled</code> 或者 <code>onRejected</code> 的，因为 <code>fn</code> 到底成功还是失败还不知道呢。那什么时候知道 <code>fn</code> 成功还是失败呢？<strong>答案是 <code>fn</code> 里面主动调 <code>resolve</code> 或者 <code>reject</code> 的时候。所以如果这时候 <code>status</code> 状态还是 <code>PENDING</code> ，我们应该将 <code>onFulfilled</code> 和 <code>onRejected</code> 两个回调存起来，等到 <code>fn</code> 有了结论，<code>resolve</code> 或者 <code>reject</code> 的时候再来调用对应的代码。因为后面 <code>then</code> 还有链式调用，会有多个 <code>onFulfilled</code> 和 <code>onRejected</code> ，我这里用两个数组将他们存起来，等 <code>resolve</code> 或者 <code>reject</code> 的时候将数组里面的全部方法拿出来执行一遍：</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 构造函数</span><span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...省略其他代码...</span>  <span class="token comment" spellcheck="true">// 构造函数里面添加两个数组存储成功和失败的回调</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...省略其他代码...</span>      <span class="token comment" spellcheck="true">// resolve里面将所有成功的回调拿出来执行</span>      that<span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...省略其他代码...</span>      <span class="token comment" spellcheck="true">// resolve里面将所有失败的回调拿出来执行</span>      that<span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// then方法</span>MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...省略其他代码...</span>  <span class="token comment" spellcheck="true">// 如果还是PENDING状态，将回调保存下来</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>realOnFulfilled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>realOnRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面这种暂时将回调保存下来，等条件满足的时候再拿出来运行让我想起了一种模式：订阅发布模式。我们往回调数组里面 <code>push</code> 回调函数，其实就相当于往事件中心注册事件了，<code>resolve</code> 就相当于发布了一个成功事件，所有注册了的事件，即 <code>onFulfilledCallbacks</code> 里面的所有方法都会拿出来执行，同理 <code>reject</code> 就相当于发布了一个失败事件。<a href="https://juejin.im/post/5e7978485188255e237c2a29">更多订阅发布模式的原理可以看这里</a>。</p><h4 id="第五步：简单测试-✍️"><a href="#第五步：简单测试-✍️" class="headerlink" title="第五步：简单测试 ✍️"></a>第五步：简单测试 ✍️</h4><p>到这里为止，其实我们已经可以实现异步调用了，只是then的返回值还没实现，还不能实现链式调用，我们先来玩一下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> MyPromise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./MyPromise'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'request1 success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'request2 failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码输出如下图，符合我们的预期，说明到目前为止，我们的代码都没问题：</p><p><img src="https://user-gold-cdn.xitu.io/2020/4/7/171529499f5ab1bb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="https://user-gold-cdn.xitu.io/2020/4/7/171529499f5ab1bb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><h4 id="第六步：then-的返回值-✍️"><a href="#第六步：then-的返回值-✍️" class="headerlink" title="第六步：then 的返回值 ✍️"></a>第六步：then 的返回值 ✍️</h4><p>根据规范then的返回值必须是一个 <code>promise</code> ，规范还定义了不同情况应该怎么处理，我们先来处理几种比较简单的情况：</p><ol><li>如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 抛出一个异常 e ，则 <code>promise2</code> 必须拒绝执行，并返回拒因 e 。</li></ol><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ... 省略其他代码 ...</span>  <span class="token comment" spellcheck="true">// 有了这个要求，在RESOLVED和REJECTED的时候就不能简单的运行onFulfilled和onRejected了。</span>  <span class="token comment" spellcheck="true">// 我们需要将他们用try...catch...包起来，如果有错就reject。</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULFILLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">realOnFulfilled</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">realOnRejected</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果还是PENDING状态，也不能直接保存回调方法了，需要包一层来捕获错误</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      that<span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token function">realOnFulfilled</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      that<span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token function">realOnRejected</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>如果 <code>onFulfilled</code> 不是函数且 <code>promise1</code> 成功执行， <code>promise2</code> 必须成功执行并返回相同的值</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 我们就根据要求加个判断，注意else里面是正常执行流程，需要resolve</span><span class="token comment" spellcheck="true">// 这是个例子，每个realOnFulfilled后面都要这样写</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULFILLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">realOnFulfilled</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ol start="3"><li>如果 <code>onRejected</code> 不是函数且 <code>promise1</code> 拒绝执行， <code>promise2</code> 必须拒绝执行并返回相同的据因。这个要求其实在我们检测 <code>onRejected</code> 不是函数的时候已经做到了，因为我们默认给的 <code>onRejected</code> 里面会 <code>throw</code> 一个 <code>Error</code> ，所以代码肯定会走到 <code>catch</code> 里面去。但是我们为了更直观，代码还是跟规范一一对应吧。需要注意的是，如果 <code>promise1</code> 的 <code>onRejected</code> 执行成功了， <code>promise2</code> 应该被 <code>resolve</code> 。改造代码如下：</li></ol><pre class=" language-js"><code class="language-js">  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">realOnRejected</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ol start="4"><li>如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 返回一个值 x ，则运行下面的 <code>Promise</code> 解决过程：<code>[[Resolve]](promise2, x)</code> 。这条其实才是规范的第一条，因为他比较麻烦，所以我将它放到了最后。前面我们代码的实现，其实只要 <code>onRejected</code> 或者 <code>onFulfilled</code> 成功执行了，我们都要 <code>resolve promise2</code> 。多了这条，我们还需要对 <code>onRejected</code> 或者 <code>onFulfilled</code> 的返回值进行判断，如果有返回值就要进行 <code>Promise</code> 解决过程。我们专门写一个方法来进行 <code>Promise</code> 解决过程。前面我们代码的实现，其实只要 <code>onRejected</code> 或者 <code>onFulfilled</code> 成功执行了，我们都要 <code>resolve promise2</code> ，这个过程我们也放到这个方法里面去吧，所以代码变为下面这样，其他地方类似：</li></ol><pre class=" language-js"><code class="language-js">  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULFILLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">realOnFulfilled</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 调用Promise 解决过程</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h4 id="第七步：Promise-解决过程-✍️"><a href="#第七步：Promise-解决过程-✍️" class="headerlink" title="第七步：Promise 解决过程 ✍️"></a>第七步：Promise 解决过程 ✍️</h4><p>现在我们该来实现 <code>resolvePromise</code> 方法了，规范中这一部分较长，我就直接把规范作为注释写在代码里面了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果 promise 和 x 指向同一对象，以 TypeError 为据因拒绝执行 promise</span>  <span class="token comment" spellcheck="true">// 这是为了防止死循环</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>promise <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'The promise and the return value are the same'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果 x 为 Promise ，则使 promise 接受 x 的状态</span>    <span class="token comment" spellcheck="true">// 也就是继续执行x，如果执行的时候拿到一个y，还要继续解析y</span>    <span class="token comment" spellcheck="true">// 这个if跟下面判断then然后拿到执行其实重复了，可有可无</span>    x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果 x 为对象或者函数</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这个坑是跑测试的时候发现的，如果x是null，应该直接resolve</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 把 x.then 赋值给 then </span>      <span class="token keyword">var</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果取 x.then 的值时抛出错误 e ，则以 e 为据因拒绝 promise</span>      <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果 then 是函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 将 x 作为函数的作用域 this 调用之</span>      <span class="token comment" spellcheck="true">// 传递两个回调函数作为参数，第一个参数叫做 resolvePromise ，第二个参数叫做 rejectPromise</span>      <span class="token comment" spellcheck="true">// 名字重名了，我直接用匿名函数了</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        then<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>          x<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 如果 resolvePromise 以值 y 为参数被调用，则运行 [[Resolve]](promise, y)</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果 resolvePromise 和 rejectPromise 均被调用，</span>            <span class="token comment" spellcheck="true">// 或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用</span>            <span class="token comment" spellcheck="true">// 实现这条需要前面加一个变量called</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 如果 rejectPromise 以据因 r 为参数被调用，则以据因 r 拒绝 promise</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果调用 then 方法抛出了异常 e：</span>        <span class="token comment" spellcheck="true">// 如果 resolvePromise 或 rejectPromise 已经被调用，则忽略之</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 否则以 e 为据因拒绝 promise</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果 then 不是函数，以 x 为参数执行 promise</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果 x 不为对象或者函数，以 x 为参数执行 promise</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="第八步：onFulfilled-和-onRejected-的执行时机-✍️"><a href="#第八步：onFulfilled-和-onRejected-的执行时机-✍️" class="headerlink" title="第八步：onFulfilled 和 onRejected 的执行时机 ✍️"></a>第八步：onFulfilled 和 onRejected 的执行时机 ✍️</h4><p>在规范中还有一条： <code>onFulfilled</code> 和 <code>onRejected</code> 只有在执行环境堆栈仅包含平台代码时才可被调用。这一条的意思是实践中要确保 <code>onFulfilled</code> 和 <code>onRejected</code> 方法异步执行，且应该在 <code>then</code> 方法被调用的那一轮事件循环之后的新执行栈中执行。所以在我们执行<code>onFulfilled</code> 和 <code>onRejected</code> 的时候都应该包到 <code>setTimeout</code> 里面去。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这块代码在then里面</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULFILLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里加setTimeout</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">realOnFulfilled</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里加setTimeout</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">realOnRejected</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    that<span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这里加setTimeout</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">realOnFulfilled</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这里加setTimeout</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">realOnRejected</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="测试用例✨"><a href="#测试用例✨" class="headerlink" title="测试用例✨"></a>测试用例✨</h3><p>我们使用 Promise/A+ 官方的测试工具 <code>promises-aplus-tests</code> 来对我们的 MyPromise 进行测试，要使用这个工具我们必须实现一个静态方法 <code>deferred</code> ，官方对这个方法的定义如下:</p><blockquote><ul><li>deferred: 返回一个包含 { promise, resolve, reject } 的对象<br>​ * promise 是一个处于 pending 状态的 promise</li><li>resolve(value) 用 value 解决上面那个 promise</li><li>reject(reason) 用 reason 拒绝上面那个 promise</li></ul></blockquote><p>代码实现：</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>deferred <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  result<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    result<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>    result<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后用 npm 将 promises-aplus-tests 下载下来，再配置下 <code>package.json</code> 就可以跑测试了：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"devDependencies"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"promises-aplus-tests"</span><span class="token keyword">:</span> <span class="token string">"^2.1.2"</span>  <span class="token punctuation">}</span>,  <span class="token string">"scripts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token keyword">:</span> <span class="token string">"promises-aplus-tests MyPromise"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在跑测试的时候发现一个坑，在 <code>resolvePromise</code> 的时候，如果 x 是 <code>null</code> ，他的类型也是 <code>object</code> ，是应该直接用 x 来 <code>resolve</code> 的，之前的代码会走到 <code>catch</code> 然后 <code>reject</code> ，所以需要检测下 <code>null</code> ：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这个坑是跑测试的时候发现的，如果x是null，应该直接resolve</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个测试总共872用例，我们写的Promise完美通过了所有用例：</p><p><img src="https://user-gold-cdn.xitu.io/2020/4/7/1715294ddab1c03d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="https://user-gold-cdn.xitu.io/2020/4/7/1715294ddab1c03d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><h3 id="其他-Promise-方法✨"><a href="#其他-Promise-方法✨" class="headerlink" title="其他 Promise 方法✨"></a>其他 Promise 方法✨</h3><p>在 <code>ES6</code> 的官方 Promise 还有很多 API ，比如：</p><blockquote><ul><li>Promise.resolve</li><li>Promise.reject</li><li>Promise.all</li><li>Promise.race</li><li>Promise.prototype.catch</li><li>Promise.prototype.finally</li><li>Promise.allSettled</li></ul></blockquote><p>虽然这些都不在 Promise/A+ 里面，但是我们也来实现一下吧，加深理解。其实我们前面实现了 Promise/A+ 再来实现这些已经是小菜一碟了，因为这些 API 全部是前面的封装而已。</p><h4 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h4><p>将现有对象转为 Promise 对象，如果 Promise.resolve 方法的参数，不是具有 then 方法的对象（又称 thenable 对象），则返回一个新的 Promise 对象，且它的状态为 fulfilled 。</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>parameter <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> parameter<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h4><p>返回一个新的 Promise 实例，该实例的状态为 rejected 。Promise.reject 方法的参数 reason ，会被传递给实例的回调函数。</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>reject <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h4><p>该方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Promise.all()</code> 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 实例，如果不是，就会先调用 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。当 p1, p2, p3 全部 resolve ，大的 promise 才 resolve ，有任何一个 reject ，大的 promise 都 reject 。</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>all <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> resPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    promiseList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> resPromise<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h4><p>用法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。上面代码中，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> resPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> resPromise<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch"></a>Promise.prototype.catch</h4><p><code>Promise.prototype.catch</code> 方法是 <code>.then(null, rejection)</code> 或 <code>.then(undefined, rejection)</code> 的别名，用于指定发生错误时的回调函数。</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally"></a>Promise.prototype.finally</h4><p><code>finally</code> 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">finally</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> error    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h4><p>该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是 fulfilled 还是 rejected，包装实例才会结束。该方法由 ES2020 引入。该方法返回的新的 Promise 实例，一旦结束，状态总是 fulfilled ，不会变成 rejected 。状态变成 fulfilled 后， Promise 的监听函数接收到的参数是一个数组，每个成员对应一个传入 Promise.allSettled() 的 Promise 实例的执行结果。</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>allSettled <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">var</span> currentPromise <span class="token operator">=</span> MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          currentPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>              status<span class="token punctuation">:</span> <span class="token string">'fulfilled'</span><span class="token punctuation">,</span>              value<span class="token punctuation">:</span> value            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>              status<span class="token punctuation">:</span> <span class="token string">'rejected'</span><span class="token punctuation">,</span>              reason<span class="token punctuation">:</span> reason            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="完整代码✨"><a href="#完整代码✨" class="headerlink" title="完整代码✨"></a>完整代码✨</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 先定义三个常量表示状态</span><span class="token keyword">var</span> PENDING <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span><span class="token keyword">var</span> FULFILLED <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span><span class="token keyword">var</span> REJECTED <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> PENDING<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始状态为pending</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化value</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 初始化reason</span>  <span class="token comment" spellcheck="true">// 构造函数里面添加两个数组存储成功和失败的回调</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 存一下this,以便resolve和reject里面访问</span>  <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// resolve方法参数是value</span>  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      that<span class="token punctuation">.</span>status <span class="token operator">=</span> FULFILLED<span class="token punctuation">;</span>      that<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// resolve里面将所有成功的回调拿出来执行</span>      that<span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// reject方法参数是reason</span>  <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      that<span class="token punctuation">.</span>status <span class="token operator">=</span> REJECTED<span class="token punctuation">;</span>      that<span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// resolve里面将所有失败的回调拿出来执行</span>      that<span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token function">fn</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果 promise 和 x 指向同一对象，以 TypeError 为据因拒绝执行 promise</span>  <span class="token comment" spellcheck="true">// 这是为了防止死循环</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>promise <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'The promise and the return value are the same'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果 x 为 Promise ，则使 promise 接受 x 的状态</span>    <span class="token comment" spellcheck="true">// 也就是继续执行x，如果执行的时候拿到一个y，还要继续解析y</span>    <span class="token comment" spellcheck="true">// 这个if跟下面判断then然后拿到执行其实重复了，可有可无</span>    x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果 x 为对象或者函数</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这个坑是跑测试的时候发现的，如果x是null，应该直接resolve</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 把 x.then 赋值给 then </span>      <span class="token keyword">var</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果取 x.then 的值时抛出错误 e ，则以 e 为据因拒绝 promise</span>      <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果 then 是函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 将 x 作为函数的作用域 this 调用之</span>      <span class="token comment" spellcheck="true">// 传递两个回调函数作为参数，第一个参数叫做 resolvePromise ，第二个参数叫做 rejectPromise</span>      <span class="token comment" spellcheck="true">// 名字重名了，我直接用匿名函数了</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        then<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>          x<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 如果 resolvePromise 以值 y 为参数被调用，则运行 [[Resolve]](promise, y)</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果 resolvePromise 和 rejectPromise 均被调用，</span>            <span class="token comment" spellcheck="true">// 或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用</span>            <span class="token comment" spellcheck="true">// 实现这条需要前面加一个变量called</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 如果 rejectPromise 以据因 r 为参数被调用，则以据因 r 拒绝 promise</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果调用 then 方法抛出了异常 e：</span>        <span class="token comment" spellcheck="true">// 如果 resolvePromise 或 rejectPromise 已经被调用，则忽略之</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 否则以 e 为据因拒绝 promise</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果 then 不是函数，以 x 为参数执行 promise</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果 x 不为对象或者函数，以 x 为参数执行 promise</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果onFulfilled不是函数，给一个默认函数，返回value</span>  <span class="token comment" spellcheck="true">// 后面返回新promise的时候也做了onFulfilled的参数检查，这里可以删除，暂时保留是为了跟规范一一对应，看得更直观</span>  <span class="token keyword">var</span> realOnFulfilled <span class="token operator">=</span> onFulfilled<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> realOnFulfilled <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    realOnFulfilled <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果onRejected不是函数，给一个默认函数，返回reason的Error</span>  <span class="token comment" spellcheck="true">// 后面返回新promise的时候也做了onRejected的参数检查，这里可以删除，暂时保留是为了跟规范一一对应，看得更直观</span>  <span class="token keyword">var</span> realOnRejected <span class="token operator">=</span> onRejected<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> realOnRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    realOnRejected <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> reason<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 保存一下this</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULFILLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">realOnFulfilled</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">realOnRejected</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果还是PENDING状态，将回调保存下来</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      that<span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">realOnFulfilled</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      that<span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">reject</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">realOnRejected</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>deferred <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  result<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>    result<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parameter <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> parameter<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>reject <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>all <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> resPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    promiseList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>promise<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> resPromise<span class="token punctuation">;</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> resPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> resPromise<span class="token punctuation">;</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">finally</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> error    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>allSettled <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> currentPromise <span class="token operator">=</span> MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          currentPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>              status<span class="token punctuation">:</span> <span class="token string">'fulfilled'</span><span class="token punctuation">,</span>              value<span class="token punctuation">:</span> value            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>              status<span class="token punctuation">:</span> <span class="token string">'rejected'</span><span class="token punctuation">,</span>              reason<span class="token punctuation">:</span> reason            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPromise<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
            <tag> then </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 App 内嵌 H5 的友盟自定义事件使用方法</title>
      <link href="posts/38b9.html"/>
      <url>posts/38b9.html</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在产品经理的穷追不舍、软磨硬破下，无奈的接下了这个需求，之前没做过，以为比较麻烦，后来在看了项目文档之后，发现相比较 App 而言， H5 的工作量其实是微乎其微的，就是测试起来比较麻烦，需要等待 90s 才能观察到上报事件，所以建议先写一个，测试没有问题的情况下，将所有自定义事件全部写好，然后来一杯☕️，边品尝边测试。</p><p>友盟地址：<a href="https://www.umeng.com/analytics">友盟</a></p><p>友盟Demo地址：<a href="https://github.com/umeng/Hybrid_Component">Demo</a></p><p>友盟Hybird文档：<a href="https://developer.umeng.com/docs/66632/detail/67585">Hybird</a></p><h3 id="引入友盟的-UMAnalytics-js-文件"><a href="#引入友盟的-UMAnalytics-js-文件" class="headerlink" title="引入友盟的 UMAnalytics.js 文件"></a>引入友盟的 <strong>UMAnalytics.js</strong> 文件</h3><p>以 react 项目为例：我们需要引入一个友盟 <a href="https://github.com/umeng/Hybrid_Component">Demo</a> 的 <a href="https://github.com/umeng/Hybrid_Component/blob/master/UMHybrid/js/UMAnalytics.js"><strong>UMAnalytics.js</strong></a> 文件，我是直接复制代码到项目中的</p><p>/util/UMAnalytics.js   源码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loadURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> iFrame<span class="token punctuation">;</span>  iFrame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  iFrame<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>  iFrame<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">,</span> <span class="token string">"display:none;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  iFrame<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"height"</span><span class="token punctuation">,</span> <span class="token string">"0px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  iFrame<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"width"</span><span class="token punctuation">,</span> <span class="token string">"0px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  iFrame<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"frameborder"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>  iFrame<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>iFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>  iFrame <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">exec</span><span class="token punctuation">(</span>funName<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> commend <span class="token operator">=</span> <span class="token punctuation">{</span>      functionName <span class="token punctuation">:</span> funName<span class="token punctuation">,</span>      arguments <span class="token punctuation">:</span> args  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> jsonStr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>commend<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"umanalytics:"</span> <span class="token operator">+</span> jsonStr<span class="token punctuation">;</span>  <span class="token function">loadURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> UMAnalyticsAgent <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 自定义事件数量统计   *   * @param eventId   *            NSString类型.事件ID，注意需要先在友盟网站注册此ID   */</span>  onEvent <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventId<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"onEvent"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> eventId <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 自定义事件数量统计   *   * @param eventId   *            NSString类型.事件ID， 注意需要先在友盟网站注册此ID   * @param eventLabel   *            NSString类型.事件标签，事件的一个属性说明   */</span>  onEventWithLabel <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> eventLabel<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"onEventWithLabel"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> eventId<span class="token punctuation">,</span> eventLabel <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 自定义事件数量统计   *   * @param eventId   *            NSString类型.事件ID， 注意需要先在友盟网站注册此ID   * @param eventData   *            NSDictionary类型.当前事件的属性集合，最多支持10个K-V值   */</span>  onEventWithParameters <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> eventData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"onEventWithParameters"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> eventId<span class="token punctuation">,</span> eventData <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 自定义事件数值型统计   *   * @param eventId   *            NSString类型.事件ID，注意要先在友盟网站上注册此事件ID   * @param eventData   *            NSDictionary类型.事件的属性集合，最多支持10个K-V值   * @param eventNum   *            int 类型.事件持续时长，单位毫秒，您需要手动计算并传入时长，作为事件的时长参数   *   */</span>  onEventWithCounter <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> eventData<span class="token punctuation">,</span> eventNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"onEventWithCounter"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> eventId<span class="token punctuation">,</span> eventData<span class="token punctuation">,</span> eventNum <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 页面统计开始时调用   *   * @param pageName   *            NSString类型.页面名称   */</span>  onPageBegin <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>pageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"onPageBegin"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> pageName <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 页面统计结束时调用   *   * @param pageName   *            NSString类型.页面名称   */</span>  onPageEnd <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>pageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"onPageEnd"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> pageName <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 统计帐号登录接口 *   *   * @param UID   *            用户账号ID,长度小于64字节   */</span>  profileSignInWithPUID <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>UID<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"profileSignInWithPUID"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> UID <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 统计帐号登录接口 *   *   * @param provider   *            帐号来源.用户通过第三方账号登陆,可以调用此接口进行统计.不能以下划线"_"开头,使用大写字母和数字标识,长度小于32字节;   *            如果是上市公司,建议使用股票代码.   * @param UID   *            用户账号ID,长度小于64字节   */</span>  profileSignInWithPUIDWithProvider <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>provider<span class="token punctuation">,</span> UID<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"profileSignInWithPUIDWithProvider"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> provider<span class="token punctuation">,</span> UID <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 帐号统计退出接口   */</span>  profileSignOff <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"profileSignOff"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 当玩家建立角色或者升级时，需调用此接口   *   * @param level   *            int类型.等级   */</span>  setUserLevelId <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"setUserLevelId"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> level <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 游戏中关卡开始的时候调用此方法。   *   * @param level   *            NSString类型.   */</span>  startLevel <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"startLevel"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> level <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 游戏中成功过关的时候调用此方法   *   * @param level   *            NSString类型.   */</span>  finishLevel <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"finishLevel"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> level <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 游戏中在某一关卡失败的时候调用此方法   *   * @param level   *            NSString类型.   */</span>  failLevel <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"failLevel"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> level <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 统计订单的接口   *   * @param currencyAmount   *            double类型.货币金额   * @param currencyType   *            NSString类型.货币类型   * @param virtualAmount   *            double类型.虚拟货币金额   * @param channel   *            int类型.   *            &lt;/p>   *            本次消费的途径:1.AppStore 2.支付宝 3.网银 4.财付通 5.移动 6.联通 7.电信 8.paypal   * @param orderId   *            NSString类型.订单ID   */</span>  exchange <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>currencyAmount<span class="token punctuation">,</span> currencyType<span class="token punctuation">,</span> virtualAmount<span class="token punctuation">,</span> channel<span class="token punctuation">,</span>                      orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"exchange"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> currencyAmount<span class="token punctuation">,</span> currencyType<span class="token punctuation">,</span> virtualAmount<span class="token punctuation">,</span>                        channel<span class="token punctuation">,</span> orderId <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 游戏中真实消费（充值）的时候调用此方法 1.AppStore 2.支付宝 3.网银 4.财付通 5.移动 6.联通 7.电信 8.paypal   *   * @param money   *            double类型.本次消费金额   * @param coin   *            double类型.本次消费等值的虚拟币   * @param source   *            int类型.本次消费的途径，网银，支付宝 等   */</span>  pay <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>money<span class="token punctuation">,</span> coin<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"pay"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> money<span class="token punctuation">,</span> coin<span class="token punctuation">,</span> source <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 游戏中真实消费（购买物品）的时候调用此方法   *   * @param money   *            double类型.本地消费金额   * @param item   *            NSString类型. 本次购买物品名称   * @param number   *            int类型.本地购买物品数量   * @param price   *            double类型.本地购买等值虚拟币   * @param source   *            int类型.本次消费的途径，网银支付宝等   */</span>  payWithItem <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>money<span class="token punctuation">,</span> item<span class="token punctuation">,</span> number<span class="token punctuation">,</span> price<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"payWithItem"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> money<span class="token punctuation">,</span> item<span class="token punctuation">,</span> number<span class="token punctuation">,</span> price<span class="token punctuation">,</span> source <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 游戏中虚拟消费（购买物品）的时候调用此方法   *   * @param item   *            NSString类型.本地购买的物品名称   * @param number   *            int类型.本地购买的物品数量   * @param price   *            double类型.本地购买花费的虚拟币数量   */</span>  buy <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> number<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"buy"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> item<span class="token punctuation">,</span> number<span class="token punctuation">,</span> price <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 游戏中使用道具时候调用此方法   *   * @param item   *            NSString类型. 道具名称   * @param number   *            int类型. 数量   * @param price   *            double类型.等值虚拟币   */</span>  use <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> number<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"use"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> item<span class="token punctuation">,</span> number<span class="token punctuation">,</span> price <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 游戏中免费获得额外金币时调用此方法   *   * @param item   *            NSString类型. 道具名称   * @param number   *            int类型. 数量   * @param price   *            double类型.等值虚拟币   * @param source   *            int类型.本次消费的途径，网银支付宝等   */</span>  bonusWithItem <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> number<span class="token punctuation">,</span> price<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"bonusWithItem"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> item<span class="token punctuation">,</span> number<span class="token punctuation">,</span> price<span class="token punctuation">,</span> source <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 游戏中免费获得额外金币时调用此方法   *   * @param coin   *            double类型. 奖励金币数额   * @param source   *            int类型.奖励金币的触发原因   */</span>  bonus <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>coin<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"bonus"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> coin<span class="token punctuation">,</span> source <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/** Dplus增加事件   * @param eventName 事件名   *              NSString类型.事件名   *   */</span>  track <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"track"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> eventName <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/** Dplus增加事件   * @param eventName   *              NSString类型.事件名   * @param property   *              NSDictionary类型.自定义属性   *   */</span>  trackWithProperty <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"trackWithProperty"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> eventName<span class="token punctuation">,</span> property<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/** * 设置属性 键值对 会覆盖同名的key   * 将该函数指定的key-value写入dplus专用文件；APP启动时会自动读取该文件的所有key-value，并将key-value自动作为后续所有track事件的属性。   * @param property   *              NSDictionary类型.自定义属性   *   */</span>  registerSuperProperty <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"registerSuperProperty"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/** * 从dplus专用文件中删除指定key-value   * @param propertyName   *              NSString类型.自定义属性   *   */</span>  unregisterSuperProperty <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"unregisterSuperProperty"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/** 返回dplus专用文件中key对应的value；如果不存在，则返回空   * @param propertyName   *              NSString类型.自定义属性   *   */</span>  getSuperProperty <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"getSuperProperty"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/** 返回Dplus专用文件中的所有key-value；如果不存在，则返回空。   *   */</span>  getSuperProperties <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"getSuperProperties"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/** * 清空Dplus专用文件中的所有key-value。   *   */</span>  clearSuperProperties <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"clearSuperProperties"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/** * 设置关注事件是否首次触发,只关注eventList前五个合法eventID.只要已经保存五个,此接口无效   * @param eventList   *              NSArray类型.自定义属性   *   */</span>  setFirstLaunchEvent <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventList<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"setFirstLaunchEvent"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>eventList<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> UMAnalyticsAgent</code></pre><p>从引入的 js 文件可以看出，上报自定义事件的方法旨在创建一个 iframe 标签，然后由客户端（App）来拦截 H5 页面中的 iframe 标签，从而实现 H5 的点击或者页面加载事件能够成功上报到友盟上</p><p>所以前端的工作只需要处理事件点击和加载时调用相应的 api 即可，UMAnalytics.js 会自动创建 iframe，下面开始使用 api 。</p><h3 id="对-UMAnalytics-js-中的-API-进行封装（根据自己项目需求）"><a href="#对-UMAnalytics-js-中的-API-进行封装（根据自己项目需求）" class="headerlink" title="对 UMAnalytics.js 中的 API 进行封装（根据自己项目需求）"></a>对 UMAnalytics.js 中的 API 进行封装（根据自己项目需求）</h3><p>自定义事件中包含有很多参数，其中 事件ID <code>eventId</code> 必传，其他参数封装成一个对象上传，根据产品需求，我对 <code>UMAnalyticsAgent.onEventWithParameters</code>  进行了一个简单的封装。</p><p>/util/YouMeng.js    源码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> UMAnalyticsAgent <span class="token keyword">from</span> <span class="token string">'./UMAnalytics'</span><span class="token punctuation">;</span><span class="token keyword">import</span> UserCenter <span class="token keyword">from</span> <span class="token string">'../module/UserCenter'</span><span class="token punctuation">;</span><span class="token keyword">import</span> util <span class="token keyword">from</span> <span class="token string">'./util'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cache <span class="token keyword">from</span> <span class="token string">'./cache'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">onEventWithParameters</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> eventData<span class="token punctuation">)</span> <span class="token punctuation">{</span>  UMAnalyticsAgent<span class="token punctuation">.</span><span class="token function">onEventWithParameters</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">...</span>eventData<span class="token punctuation">,</span> eventId<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">YouMeng</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> eventData<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>util<span class="token punctuation">.</span><span class="token function">isInYuantuApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 仅在慧医app中</span>    <span class="token keyword">return</span>   <span class="token punctuation">}</span>  <span class="token keyword">let</span> userId <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'userId'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UserCenter<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>eventData<span class="token punctuation">.</span>unionId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      onSuccess<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>          userId <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id          <span class="token function">onEventWithParameters</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>eventData<span class="token punctuation">,</span> userId <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">onEventWithParameters</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>eventData<span class="token punctuation">,</span> userId <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> YouMeng</code></pre><h3 id="使用封装好的-YouMeng-组件"><a href="#使用封装好的-YouMeng-组件" class="headerlink" title="使用封装好的 YouMeng 组件"></a>使用封装好的 YouMeng 组件</h3><ol><li>在需要上报的页面中引入组件：</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> YouMeng <span class="token keyword">from</span> <span class="token string">'./lib/YouMeng'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 组件所在目录</span></code></pre><ol start="2"><li>使用组件</li></ol><pre class=" language-js"><code class="language-js"><span class="token function">YouMeng</span><span class="token punctuation">(</span><span class="token string">'BindCardSuccess'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> unionId<span class="token punctuation">:</span> _this<span class="token punctuation">.</span>query<span class="token punctuation">.</span>unionId <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="查看友盟实时-90s延迟-数据"><a href="#查看友盟实时-90s延迟-数据" class="headerlink" title="查看友盟实时(90s延迟)数据"></a>查看友盟实时(90s延迟)数据</h2><p><img src="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/f604cd5e8dcd62ff4c9fb4c8a6895ec1-2794-1174.png" alt="友盟自定义事件统计图"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h5 </tag>
            
            <tag> 友盟 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 安装 mongoDB 报错问题</title>
      <link href="posts/855a.html"/>
      <url>posts/855a.html</url>
      
        <content type="html"><![CDATA[<p>brew tap mongodb/brew</p><p>brew install <a href="mailto:mongodb-community@4.2">mongodb-community@4.2</a></p><h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><p>配置文件：/usr/local/etc/mongod.conf</p><p>日志目录路径：/usr/local/var/log/mongodb</p><p>数据目录路径：/usr/local/var/mongodb</p><h2 id="启动-amp-停止"><a href="#启动-amp-停止" class="headerlink" title="启动&amp;停止"></a>启动&amp;停止</h2><p>brew services start mongodb-community</p><p>brew services stop mongodb-community</p><h2 id="手动启动-mongod"><a href="#手动启动-mongod" class="headerlink" title="手动启动 mongod"></a>手动启动 mongod</h2><h3 id="如果不需要或不需要后台MongoDB服务，可以运行："><a href="#如果不需要或不需要后台MongoDB服务，可以运行：" class="headerlink" title="如果不需要或不需要后台MongoDB服务，可以运行："></a>如果不需要或不需要后台MongoDB服务，可以运行：</h3><p>mongod –config /usr/local/etc/mongod.conf</p><p>【注】如果不包括–config选项具有配置文件的路径，则MongoDB服务器没有默认配置文件或日志目录路径，并且将使用 /data/db.</p><h3 id="关机-mongod-手动启动，请使用-admin-数据库和运行-db-shutdownServer"><a href="#关机-mongod-手动启动，请使用-admin-数据库和运行-db-shutdownServer" class="headerlink" title="关机 mongod 手动启动，请使用 admin 数据库和运行 db.shutdownServer():"></a>关机 mongod 手动启动，请使用 admin 数据库和运行 db.shutdownServer():</h3><p>mongo admin –eval “db.shutdownServer()”</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 安装及对 antd Pro 项目进行 nginx 配置和 gzip 压缩</title>
      <link href="posts/1512.html"/>
      <url>posts/1512.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><hr><h3 id="更新update"><a href="#更新update" class="headerlink" title="更新update"></a>更新update</h3><pre><code>apt-get update</code></pre><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><pre><code>sudo apt-get install nginx</code></pre><h3 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h3><pre><code>nginx -v</code></pre><h2 id="运行-nginx"><a href="#运行-nginx" class="headerlink" title="运行 nginx"></a>运行 nginx</h2><hr><h3 id="启动-nginx"><a href="#启动-nginx" class="headerlink" title="启动 nginx"></a>启动 nginx</h3><pre><code>service nginx start</code></pre><h3 id="查看-nginx-是否启动"><a href="#查看-nginx-是否启动" class="headerlink" title="查看 nginx 是否启动"></a>查看 nginx 是否启动</h3><pre><code>ps -ef | grep nginx</code></pre><h3 id="停止-nginx"><a href="#停止-nginx" class="headerlink" title="停止 nginx"></a>停止 nginx</h3><pre><code>service nginx stop</code></pre><h3 id="重启-nginx"><a href="#重启-nginx" class="headerlink" title="重启 nginx"></a>重启 nginx</h3><pre><code>service nginx restart</code></pre><h2 id="配置-nginx-服务"><a href="#配置-nginx-服务" class="headerlink" title="配置 nginx 服务"></a>配置 nginx 服务</h2><hr><h3 id="修改配置文件-nginx-conf"><a href="#修改配置文件-nginx-conf" class="headerlink" title="修改配置文件 nginx.conf"></a>修改配置文件 nginx.conf</h3><pre><code>vim /etc/nginx/nginx.conf</code></pre><hr><h3 id="antd-Pro-配置信息"><a href="#antd-Pro-配置信息" class="headerlink" title="antd Pro 配置信息"></a>antd Pro 配置信息</h3><pre><code>    server {        listen 80;        # gzip config        gzip on;        gzip_min_length 1k;        gzip_comp_level 9;        gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;        gzip_vary on;        gzip_disable "MSIE [1-6]\.";        root ~/weData/build/index.html;        location / {            # 用于配合 browserHistory使用            try_files $uri $uri/ /index.html;            # 如果有资源，建议使用 https + http2，配合按需加载可以获得更好的体验            # rewrite ^/(.*)$ https://preview.pro.ant.design/$1 permanent;        }        location /api {            proxy_pass https://localhost:8080/;            proxy_set_header   X-Forwarded-Proto $scheme;            proxy_set_header   X-Real-IP         $remote_addr;        }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.04 安装 MongoDB 4.0</title>
      <link href="posts/fdd6.html"/>
      <url>posts/fdd6.html</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu18-04-安装-MongoDB-4-0"><a href="#ubuntu18-04-安装-MongoDB-4-0" class="headerlink" title="ubuntu18.04 安装 MongoDB 4.0"></a>ubuntu18.04 安装 MongoDB 4.0</h2><hr><blockquote><p>在终端输入GPK码</p></blockquote><pre><code>$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4</code></pre><blockquote><p>添加 MongoDB 源</p></blockquote><h5 id="Ubuntu-18-04-LTS"><a href="#Ubuntu-18-04-LTS" class="headerlink" title="Ubuntu 18.04 LTS:"></a>Ubuntu 18.04 LTS:</h5><pre><code>$ echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb.list</code></pre><h5 id="Ubuntu-16-04-LTS"><a href="#Ubuntu-16-04-LTS" class="headerlink" title="Ubuntu 16.04 LTS:"></a>Ubuntu 16.04 LTS:</h5><pre><code>$ echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb.list</code></pre><blockquote><p>安装 MongoDB Server</p></blockquote><pre><code>$ sudo apt update$ sudo apt install mongodb-org</code></pre><blockquote><p>对 MongoDB Server 的管理</p></blockquote><pre><code>sudo systemctl enable mongod 允许开机启动sudo systemctl start mongod立即启动mongod</code></pre><blockquote><p>验证mongoDB4.0</p></blockquote><pre><code>mongod --version</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoDB </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用 git 指令集合</title>
      <link href="posts/6cbf.html"/>
      <url>posts/6cbf.html</url>
      
        <content type="html"><![CDATA[<h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><pre><code>git branch     </code></pre><h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><pre><code>git branch -a</code></pre><h3 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h3><pre><code>git checkout -b [本地分支]</code></pre><h3 id="将本地分支关联到远程的新建的同名分支上"><a href="#将本地分支关联到远程的新建的同名分支上" class="headerlink" title="将本地分支关联到远程的新建的同名分支上"></a>将本地分支关联到远程的新建的同名分支上</h3><pre><code>git push remote [dev]:[dev]</code></pre><h3 id="删除远程分支两种方法"><a href="#删除远程分支两种方法" class="headerlink" title="删除远程分支两种方法"></a>删除远程分支两种方法</h3><pre><code>git push origin --delete [远程分支]git push origin :[远程分支]    （推送空分支，相当于删除远程分支）</code></pre><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><pre><code>git branch -D [本地分支]</code></pre><h3 id="查找之前的分支的commit-id"><a href="#查找之前的分支的commit-id" class="headerlink" title="查找之前的分支的commit-id"></a>查找之前的分支的commit-id</h3><pre><code>git log -g </code></pre><h3 id="误删本地分支找回"><a href="#误删本地分支找回" class="headerlink" title="误删本地分支找回"></a>误删本地分支找回</h3><pre><code>git branch [新本地分支名] [commit-id]</code></pre><h3 id="创建新分支关联远程分支"><a href="#创建新分支关联远程分支" class="headerlink" title="创建新分支关联远程分支"></a>创建新分支关联远程分支</h3><pre><code>git checkout -b [本地分支] origin/[远程分支]</code></pre><h3 id="缓存修改的内容"><a href="#缓存修改的内容" class="headerlink" title="缓存修改的内容"></a>缓存修改的内容</h3><pre><code>git stash save '账单改造'推出最后缓存一次的修改内容git stash pop查看还在堆栈中的缓存git stash list</code></pre><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><pre><code>切到主分支git checkout master拉取落后的提交代码git pull切到需要合并到分支git checkout daily/2.5.1提示落后提交git pull分支合并到主分支git rebase master遇到代码冲突，解决后继续提交git add .git rebase --continue创建新分支git checkout -b daily/2.7.0git add .git commit -m 'feat: 新增广告位'</code></pre><h3 id="合并-commit"><a href="#合并-commit" class="headerlink" title="合并 commit"></a>合并 commit</h3><pre><code>查看提交的所有 commitgit log合并两个commitgit rebase -i HEAD~2将第二行的 'feat:' 改成 's'，修改第一行的信息并保存</code></pre><h3 id="撤销-pull-指令-回退版本"><a href="#撤销-pull-指令-回退版本" class="headerlink" title="撤销 pull 指令 / 回退版本"></a>撤销 pull 指令 / 回退版本</h3><pre><code>运行 `git reflog` 命令查看你的历史变更记录用git reset --hard HEAD@{n}，（n是你要回退到的引用位置）回退</code></pre><h3 id="同步主干代码"><a href="#同步主干代码" class="headerlink" title="同步主干代码"></a>同步主干代码</h3><pre><code>git pull origin master --rebase</code></pre><h3 id="将一个A分支的-commit-合到另一个B分支"><a href="#将一个A分支的-commit-合到另一个B分支" class="headerlink" title="将一个A分支的 commit 合到另一个B分支"></a>将一个A分支的 commit 合到另一个B分支</h3><pre><code>1. 首先切到 A 分支git log   // 找到需要合的 commit 的哈希值 commit-id ，复制一下2. 切到 B 分支git cherry-pick commit-id 3. 提交，处理冲突</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 常用指令</title>
      <link href="posts/6f9b.html"/>
      <url>posts/6f9b.html</url>
      
        <content type="html"><![CDATA[<ul><li>查看端口是否被占用  <code>netstat -ap | grep 80</code>  或者  <code>lsof -i:8090  </code></li><li>杀掉正在运行的端口 <code>kill -9 PID</code></li><li>杀掉 TCP 连接状态是 TIME_WAIT <code>lsof -n -i@127.0.0.1|grep 27017</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千岛湖旅游</title>
      <link href="posts/f5f0.html"/>
      <url>posts/f5f0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 旅游 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 单页配置指南</title>
      <link href="posts/dd44.html"/>
      <url>posts/dd44.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><ul><li>entry</li><li>output - [filename, path] - resolve</li><li>module - rules - (loader) - [test, use]</li><li>plugins - 下载 - 引入 - 使用</li><li>mode</li><li>devServer</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i webpack webpack-cli -D</code></pre><h3 id="二、loader"><a href="#二、loader" class="headerlink" title="二、loader"></a>二、loader</h3><p>实例：处理 <code>css, less 样式文件</code>、<code> img 等图片文件</code> 及<code>其他资源</code>的 loader</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// use 执行顺序 从下往上</span>          <span class="token comment" spellcheck="true">// 创建 style 标签，将 js 中样式资源插入，添加到 head 中生效</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 将 css 文件变成 commonjs 模块加载到 js 中，内容是样式字符串</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// use 执行顺序 从下往上</span>          <span class="token comment" spellcheck="true">// 创建 style 标签，将 js 中样式资源插入，添加到 head 中生效</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 将 css 文件变成 commonjs 模块加载到 js 中，内容是样式字符串</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 将 less 文件变成 css 文件</span>          <span class="token comment" spellcheck="true">// npm i less less-loader -D</span>          <span class="token string">'less-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 问题：默认处理不了 html 中 img 图片（使用 html-loader 解决）</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|png|gif)$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 只有一个 loader 可以直接 loader，不需要使用 use</span>        <span class="token comment" spellcheck="true">// 下载 url-loader file-loader 两个包</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 图片大小小于8kb就会被base64处理</span>          <span class="token comment" spellcheck="true">// 优点：减少请求数量</span>          <span class="token comment" spellcheck="true">// 缺点：图片体积会更大（文件请求速度更慢）</span>          limit<span class="token punctuation">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 问题：url-loader 默认使用 ES6 模块化解析</span>          <span class="token comment" spellcheck="true">//             html-loader 默认使用 commonjs 解析，解析会报错</span>          <span class="token comment" spellcheck="true">// 解决：关闭 ES6 模块化处理</span>          esModule<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 给图片重命名，取hash前10位，取图片原扩展名</span>          name<span class="token punctuation">:</span> <span class="token string">'[hash:10][.ext]'</span><span class="token punctuation">,</span>          outputPath<span class="token punctuation">:</span> <span class="token string">'imgs'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 专门处理 html 中 img 文件图片</span>        <span class="token comment" spellcheck="true">// 负责引入 img 图片，能被 url-loader 处理</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'html-loader'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 打包其他资源</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/\.(html|js|css|less|jpg|png|gif)$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'[hash:10][.ext]'</span><span class="token punctuation">,</span>          outputPath<span class="token punctuation">:</span> <span class="token string">'media'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i css-loader style-loader <span class="token function">less</span> less-loader -D</code></pre><h3 id="三、plugins"><a href="#三、plugins" class="headerlink" title="三、plugins"></a>三、plugins</h3><p>实例：打包 html 文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// loader 的配置</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 默认创建一个空 html 文件，自动引入输出的所有资源（js/css)，不具有 html 结构</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 复制 './src/index.html' 文件，并自动引入输出的所有资源</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i html-webpack-plugin -D<span class="token function">npm</span> i url-loader file-loader -D<span class="token function">npm</span> i html-loader -D</code></pre><h3 id="四、开发服务器-devServer"><a href="#四、开发服务器-devServer" class="headerlink" title="四、开发服务器 devServer"></a>四、开发服务器 devServer</h3><p>用来自动化（自动编译、自动打开浏览器、自动刷新浏览器）</p><p>启动指令：<code>npx webpack-dev-server</code></p><p>当 webpack 版本为 5.x，而 webpack-dev-server 版本为 3.x时，启动命令：npx webpack serve –open true</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// loader 配置</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// plugins 配置</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 特点：只会在内存中打包，不会有任何输出</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 启动 gzip 压缩</span>    compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 自动打开默认浏览器</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>npm i webpack-dev-server -D</code></pre><h3 id="五、生产环境配置"><a href="#五、生产环境配置" class="headerlink" title="五、生产环境配置"></a>五、生产环境配置</h3><h4 id="1-提取-css-为单独文件"><a href="#1-提取-css-为单独文件" class="headerlink" title="1. 提取 css 为单独文件"></a>1. 提取 css 为单独文件</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">// 'style-loader',</span>          <span class="token comment" spellcheck="true">// 用MiniCssExtractPlugin.loader替换style-loader：提取js中的css为单独文件</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 将 css 文件变成 commonjs 模块加载到 js 中，内容是样式字符串</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/index.css'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i mini-css-extract-plugin -D</code></pre><h4 id="2-css-兼容性处理"><a href="#2-css-兼容性处理" class="headerlink" title="2. css 兼容性处理"></a>2. css 兼容性处理</h4><p>通过 <code>postcss</code> 找到 package.json 中 <code>browserslist</code> 里面的配置，通过配置加载指定的 css 兼容性样式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*** webpack.config.js**/</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span>postcss<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">=</span> <span class="token string">'development'</span>    <span class="token comment" spellcheck="true">// package.json 开发环境时，必须配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// css 兼容性处理</span>          <span class="token comment" spellcheck="true">// loader 修改配置</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              ident<span class="token punctuation">:</span> <span class="token string">'postcss'</span><span class="token punctuation">,</span>              plugins<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>                <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-preset-env'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/index.css'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>webpack 打包时默认查找 package.json 中 browserslist 的生产环境，而非 webpack.config.js 中的 mode 。</p><pre class=" language-json"><code class="language-json">/*** package.json**/<span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"file-loader"</span><span class="token operator">:</span> <span class="token string">"^6.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"html-loader"</span><span class="token operator">:</span> <span class="token string">"^1.3.2"</span><span class="token punctuation">,</span>    <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^4.5.0"</span><span class="token punctuation">,</span>    <span class="token property">"less"</span><span class="token operator">:</span> <span class="token string">"^3.12.2"</span><span class="token punctuation">,</span>    <span class="token property">"less-loader"</span><span class="token operator">:</span> <span class="token string">"^7.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"mini-css-extract-plugin"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"postcss-loader"</span><span class="token operator">:</span> <span class="token string">"^4.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"postcss-preset-env"</span><span class="token operator">:</span> <span class="token string">"^6.7.0"</span><span class="token punctuation">,</span>    <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"url-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.1.3"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"last 1 chrome version"</span><span class="token punctuation">,</span>      <span class="token string">"last 1 firefox version"</span><span class="token punctuation">,</span>      <span class="token string">"last 1 safari version"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">">0.2%"</span><span class="token punctuation">,</span>      <span class="token string">"not dead"</span><span class="token punctuation">,</span>      <span class="token string">"not op_mini all"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>npm i postcss-loader postcss-preset-env -D</code></pre><h4 id="3-压缩-css-代码-optimize-css-assets-webpack-plugin"><a href="#3-压缩-css-代码-optimize-css-assets-webpack-plugin" class="headerlink" title="3. 压缩 css 代码 (optimize-css-assets-webpack-plugin)"></a>3. 压缩 css 代码 (optimize-css-assets-webpack-plugin)</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** webpack.config.js**/</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              ident<span class="token punctuation">:</span> <span class="token string">'postcss'</span><span class="token punctuation">,</span>              plugins<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-preset-env'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/index.css'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 压缩 css</span>    <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i optimize-css-assets-webpack-plugin -D</code></pre><h4 id="4-javascript-语法检查-（eslint）"><a href="#4-javascript-语法检查-（eslint）" class="headerlink" title="4. javascript 语法检查 （eslint）"></a>4. javascript 语法检查 （eslint）</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** webpack.config.js**/</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">/**       * 语法检查，多人开发风格一致       * 只检查源代码，三方库除外       * 设置检查规则：       *    package.json 中 eslintConfig 中的设置       *    推荐 airbnb --> eslint-config-airbnb-base eslint eslint-plugin-import       *    eslint-config-airbnb 是 react 使用       * */</span>       <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'eslint-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 自动修复 eslint 错误</span>          fix<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** index.js**/</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 下一行开始 eslint 所有规则都会失效</span><span class="token comment" spellcheck="true">// eslint-disable-next-line</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><pre class=" language-json"><code class="language-json">/***    package.json*/<span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"^7.11.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-config-airbnb-base"</span><span class="token operator">:</span> <span class="token string">"^14.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-loader"</span><span class="token operator">:</span> <span class="token string">"^4.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-plugin-import"</span><span class="token operator">:</span> <span class="token string">"^2.22.1"</span><span class="token punctuation">,</span>    <span class="token property">"file-loader"</span><span class="token operator">:</span> <span class="token string">"^6.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"html-loader"</span><span class="token operator">:</span> <span class="token string">"^1.3.2"</span><span class="token punctuation">,</span>    <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^4.5.0"</span><span class="token punctuation">,</span>    <span class="token property">"less"</span><span class="token operator">:</span> <span class="token string">"^3.12.2"</span><span class="token punctuation">,</span>    <span class="token property">"less-loader"</span><span class="token operator">:</span> <span class="token string">"^7.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"mini-css-extract-plugin"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"optimize-css-assets-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"postcss-loader"</span><span class="token operator">:</span> <span class="token string">"^4.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"postcss-preset-env"</span><span class="token operator">:</span> <span class="token string">"^6.7.0"</span><span class="token punctuation">,</span>    <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"url-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.1.3"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"last 1 chrome version"</span><span class="token punctuation">,</span>      <span class="token string">"last 1 firefox version"</span><span class="token punctuation">,</span>      <span class="token string">"last 1 safari version"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">">0.2%"</span><span class="token punctuation">,</span>      <span class="token string">"not dead"</span><span class="token punctuation">,</span>      <span class="token string">"not op_mini all"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"eslintConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"airbnb-base"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>npm i eslint-config-airbnb-base eslint eslint-plugin-import eslint-loader -D</code></pre><h4 id="5-javascript-兼容性处理"><a href="#5-javascript-兼容性处理" class="headerlink" title="5. javascript 兼容性处理"></a>5. javascript 兼容性处理</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** webpack.config.js**/</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">/**       * js 兼容性处理：babel-loader  @babel/preset-env  @babel/core       * 1. 基本js兼容性处理： @babel/preset-env  （直接在 js 文件中 import 引入即可）       *    问题：只能转化基本语法，如 promise 不能转化       * 2. 全部js兼容性处理： @babel/polyfill       *    问题：体积太大       * 3. 按需兼容： core-js(使用第三种就不能使用第二种)       */</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_module/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 预设：指示 babel 做怎么样的兼容性处理</span>          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span>              <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 按需加载</span>                useBuiltIns<span class="token punctuation">:</span> <span class="token string">'usage'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 指定core-js版本</span>                corejs<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  version<span class="token punctuation">:</span> <span class="token number">3</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 指定兼容性做到哪个版本的浏览器</span>                targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  chrome<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                  firefox<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                  ie<span class="token punctuation">:</span> <span class="token string">'9'</span><span class="token punctuation">,</span>                  safari<span class="token punctuation">:</span> <span class="token string">'10'</span><span class="token punctuation">,</span>                  edge<span class="token punctuation">:</span> <span class="token string">'17'</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i babel-loader @babel/preset-env @babel/polyfill @babel/core -D</code></pre><h4 id="6-html-amp-javascript-压缩"><a href="#6-html-amp-javascript-压缩" class="headerlink" title="6. html &amp; javascript 压缩"></a>6. html &amp; javascript 压缩</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** webpack.config.js**/</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 生产环境自动压缩 js 代码</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// html 代码压缩</span>      minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 移除空格</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 移除注释</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="7-生产环境配置"><a href="#7-生产环境配置" class="headerlink" title="7. 生产环境配置"></a>7. 生产环境配置</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** webpack.config.js**/</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// css 兼容性处理</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// css 代码压缩</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">=</span> <span class="token string">'development'</span><span class="token keyword">const</span> commonCssLoader <span class="token operator">=</span> <span class="token punctuation">[</span>  MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>  <span class="token string">'css-loader'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 需要在 package.json 中定义 browserslist</span>  <span class="token punctuation">{</span>    loader<span class="token punctuation">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>    ident<span class="token punctuation">:</span> <span class="token string">'postcss'</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>      postcssOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">[</span><span class="token string">'postcss-preset-env'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// js 代码压缩</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>commonCssLoader<span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>commonCssLoader<span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// package.json 中 eslintConfig 中的设置</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 优先执行 eslint ，然后执行 babel</span>        enforce<span class="token punctuation">:</span> <span class="token string">'pre'</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'eslint-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 自动修复 eslint 错误</span>          fix<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span>              <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                useBuiltIns<span class="token punctuation">:</span> <span class="token string">'usage'</span><span class="token punctuation">,</span>                corejs<span class="token punctuation">:</span> <span class="token punctuation">{</span> version<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  chrome<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                  firefox<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                  ie<span class="token punctuation">:</span> <span class="token string">'9'</span><span class="token punctuation">,</span>                  safari<span class="token punctuation">:</span> <span class="token string">'10'</span><span class="token punctuation">,</span>                  edge<span class="token punctuation">:</span> <span class="token string">'17'</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 问题：默认处理不了 html 中 img 图片（使用 html-loader 解决）</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|png|gif)$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 只有一个 loader 可以直接 loader，不需要使用 use</span>        <span class="token comment" spellcheck="true">// 下载 url-loader file-loader 两个包</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 图片大小小于8kb就会被base64处理</span>          <span class="token comment" spellcheck="true">// 优点：减少请求数量</span>          <span class="token comment" spellcheck="true">// 缺点：图片体积会更大（文件请求速度更慢）</span>          limit<span class="token punctuation">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 问题：url-loader 默认使用 ES6 模块化解析</span>          <span class="token comment" spellcheck="true">//             html-loader 默认使用 commonjs 解析，解析会报错</span>          <span class="token comment" spellcheck="true">// 解决：关闭 ES6 模块化处理</span>          esModule<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 给图片重命名，取hash前10位，取图片原扩展名</span>          name<span class="token punctuation">:</span> <span class="token string">'[hash:10].[ext]'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 输出路径</span>          publicPath<span class="token punctuation">:</span> <span class="token string">'../'</span><span class="token punctuation">,</span>          outputPath<span class="token punctuation">:</span> <span class="token string">'images'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 专门处理 html 中 img 文件图片</span>        <span class="token comment" spellcheck="true">// 负责引入 img 图片，能被 url-loader 处理</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'html-loader'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 打包其他资源</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/\.(html|js|css|less|jpg|png|gif)$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'[hash:10].[ext]'</span><span class="token punctuation">,</span>          publicPath<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>          outputPath<span class="token punctuation">:</span> <span class="token string">'otherFile'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/index.css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// html 代码压缩</span>      minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 特点：只会在内存中打包，不会有任何输出</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 启动 gzip 压缩</span>    compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 自动打开默认浏览器</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.12.3"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/polyfill"</span><span class="token operator">:</span> <span class="token string">"^7.12.1"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.12.1"</span><span class="token punctuation">,</span>    <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^8.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"core-js"</span><span class="token operator">:</span> <span class="token string">"^3.6.5"</span><span class="token punctuation">,</span>    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"^7.11.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-config-airbnb-base"</span><span class="token operator">:</span> <span class="token string">"^14.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-loader"</span><span class="token operator">:</span> <span class="token string">"^4.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-plugin-import"</span><span class="token operator">:</span> <span class="token string">"^2.22.1"</span><span class="token punctuation">,</span>    <span class="token property">"file-loader"</span><span class="token operator">:</span> <span class="token string">"^6.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"html-loader"</span><span class="token operator">:</span> <span class="token string">"^1.3.2"</span><span class="token punctuation">,</span>    <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^4.5.0"</span><span class="token punctuation">,</span>    <span class="token property">"less"</span><span class="token operator">:</span> <span class="token string">"^3.12.2"</span><span class="token punctuation">,</span>    <span class="token property">"less-loader"</span><span class="token operator">:</span> <span class="token string">"^7.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"mini-css-extract-plugin"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"optimize-css-assets-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"postcss-loader"</span><span class="token operator">:</span> <span class="token string">"^4.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"postcss-preset-env"</span><span class="token operator">:</span> <span class="token string">"^6.7.0"</span><span class="token punctuation">,</span>    <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"url-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.1.3"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"last 1 chrome version"</span><span class="token punctuation">,</span>      <span class="token string">"last 1 firefox version"</span><span class="token punctuation">,</span>      <span class="token string">"last 1 safari version"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">">0.2%"</span><span class="token punctuation">,</span>      <span class="token string">"not dead"</span><span class="token punctuation">,</span>      <span class="token string">"not op_mini all"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"eslintConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"airbnb-base"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-Webpack-优化配置"><a href="#7-Webpack-优化配置" class="headerlink" title="7. Webpack 优化配置"></a>7. Webpack 优化配置</h4><h5 id="1⃣️-HMR-hot-module-replacement-：热模块替换"><a href="#1⃣️-HMR-hot-module-replacement-：热模块替换" class="headerlink" title="1⃣️ HMR (hot module replacement)：热模块替换"></a>1⃣️ HMR (hot module replacement)：热模块替换</h5><blockquote><p>HMR 使用结论</p></blockquote><ul><li>样式文件：可以使用 HMR 功能，因为 style-loader 内部实现了</li><li>js 文件：默认不使用 HMR 功能</li><li>html 文件：默认不使用 HMR 功能，同时 html 不能热更新了</li></ul><blockquote><p>问题解决方案：</p></blockquote><ul><li><p>html 不能热更新了：修改 entry 入口，将 html 文件引入（ spa 项目不用做 HMR 功能）</p></li><li><p>js 文件不使用 HMR 功能：修改 js 代码，添加支持 HMR 功能代码（只能处理非入口文件）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 一但 module.hot 为 true，说明开启了 HMR 功能</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">'./print.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法监听 print.js 文件变化，一旦变化，其他模块不会重新打包构建</span>    <span class="token comment" spellcheck="true">// 会执行回调函数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>#####2⃣️ source-map：通过映射追踪源代码错误位置</p><blockquote><p>source-map</p></blockquote><ul><li>生成一个外部 source-map 文件</li><li>精确到错误语句</li></ul><blockquote><p>inline-source-map：</p></blockquote><ul><li>只生成一个内联 source-map</li><li>精确到错误语句</li></ul><blockquote><p>hidden-source-map：</p></blockquote><ul><li>生成一个外部 source-map 文件</li><li>精确到构建后的错误语句位置</li></ul><blockquote><p>eval-source-map：</p></blockquote><ul><li>每个文件都会生成一个内联 source-map</li><li>精确到错误语句</li></ul><blockquote><p>nosources-source-map：</p></blockquote><ul><li>生成一个外部 source-map 文件</li><li>精确到错误语句位置，但无法查看源代码</li></ul><blockquote><p>cheap-source-map：</p></blockquote><ul><li>生成一个外部 source-map 文件</li><li>精确到错误语句所在行</li></ul><blockquote><p>cheap-module-source-map：</p></blockquote><ul><li>生成一个外部 source-map 文件</li><li>精确到错误语句</li></ul><p>开发环境：调试更友好，速度块（eval &gt; inline &gt; cheap &gt; …）–&gt; eval-source-map</p><p>生产环境：源代码隐藏（hidden / nosources），调试更友好（source-map &gt; cheap-module-source-map）</p><h5 id="3⃣️-oneOf"><a href="#3⃣️-oneOf" class="headerlink" title="3⃣️ oneOf"></a>3⃣️ oneOf</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** webpack.config.js**/</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// css 兼容性处理</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// css 代码压缩</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">=</span> <span class="token string">'development'</span><span class="token keyword">const</span> commonCssLoader <span class="token operator">=</span> <span class="token punctuation">[</span>  MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>  <span class="token string">'css-loader'</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    loader<span class="token punctuation">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>    ident<span class="token punctuation">:</span> <span class="token string">'postcss'</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>      postcssOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">[</span><span class="token string">'postcss-preset-env'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// js 代码压缩</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>        enforce<span class="token punctuation">:</span> <span class="token string">'pre'</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'eslint-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          fix<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 以下 loader 只会匹配一个</span>        <span class="token comment" spellcheck="true">// 注意：不能有两个配置处理同一种类型文件</span>        oneOf<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>commonCssLoader<span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>commonCssLoader<span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>            loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">[</span>                  <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span>                    useBuiltIns<span class="token punctuation">:</span> <span class="token string">'usage'</span><span class="token punctuation">,</span>                    corejs<span class="token punctuation">:</span> <span class="token punctuation">{</span> version<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>                      chrome<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                      firefox<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                      ie<span class="token punctuation">:</span> <span class="token string">'9'</span><span class="token punctuation">,</span>                      safari<span class="token punctuation">:</span> <span class="token string">'10'</span><span class="token punctuation">,</span>                      edge<span class="token punctuation">:</span> <span class="token string">'17'</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">]</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|png|gif)$/</span><span class="token punctuation">,</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>              esModule<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              name<span class="token punctuation">:</span> <span class="token string">'[hash:10].[ext]'</span><span class="token punctuation">,</span>              publicPath<span class="token punctuation">:</span> <span class="token string">'../'</span><span class="token punctuation">,</span>              outputPath<span class="token punctuation">:</span> <span class="token string">'images'</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>            loader<span class="token punctuation">:</span> <span class="token string">'html-loader'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            exclude<span class="token punctuation">:</span> <span class="token regex">/\.(html|js|css|less|jpg|png|gif)$/</span><span class="token punctuation">,</span>            loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              name<span class="token punctuation">:</span> <span class="token string">'[hash:10].[ext]'</span><span class="token punctuation">,</span>              publicPath<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>              outputPath<span class="token punctuation">:</span> <span class="token string">'otherFile'</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h5 id="4⃣️-缓存"><a href="#4⃣️-缓存" class="headerlink" title="4⃣️ 缓存"></a>4⃣️ 缓存</h5><ul><li><p>babel 缓存</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        oneOf<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>            loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">[</span>                  <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span>                    useBuiltIns<span class="token punctuation">:</span> <span class="token string">'usage'</span><span class="token punctuation">,</span>                    corejs<span class="token punctuation">:</span> <span class="token punctuation">{</span> version<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>                      chrome<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                      firefox<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                      ie<span class="token punctuation">:</span> <span class="token string">'9'</span><span class="token punctuation">,</span>                      safari<span class="token punctuation">:</span> <span class="token string">'10'</span><span class="token punctuation">,</span>                      edge<span class="token punctuation">:</span> <span class="token string">'17'</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">]</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 开启babel缓存</span>            <span class="token comment" spellcheck="true">// 第二次构建，会读取之前的缓存</span>            cacheDirectory<span class="token punctuation">:</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li><li><p>文件资源缓存</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 避免强缓存，给打包文件加哈希值</span><span class="token comment" spellcheck="true">// 问题：js 和 css 文件使用同一个hash值，重新打包会导致所有缓存失效</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.[hash:10].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/index.[hash:10].css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 解决：chunkhash</span><span class="token comment" spellcheck="true">// 根据 chunk 生成 hash 值，如果打包来源同一个 chunk，那么 hash 一样</span><span class="token comment" spellcheck="true">// 问题：js 和 css 文件 hash 值还是一样，原因是 css 是在 js 中被引入的，同属于一个 chunk</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.[chunkhash:10].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/index.[chunkhash:10].css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 解决：contenthash</span><span class="token comment" spellcheck="true">// 根据文件内容生成 hash 值，不同文件内容，hash 一定不一样</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.[contenthash:10].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/index.[contenthash:10].css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="5⃣️-tree-shaking"><a href="#5⃣️-tree-shaking" class="headerlink" title="5⃣️ tree shaking"></a>5⃣️ tree shaking</h5><blockquote><p>前提：1. 开启 production 环境；2. 必须使用 ES6 模块化</p><p>作用：在应用程序中去除没有使用的代码，使代码体积更小</p><p>问题：</p><p>​    在 package.json 中配置 <code>sideEffects: false</code>，即所有代码都没有副作用</p><p>​    可能会将 css / @babel/pollfill 等文件干掉</p><p>解决：<code>sideEffects: ["*.css"]</code></p></blockquote><h5 id="6⃣️-code-split"><a href="#6⃣️-code-split" class="headerlink" title="6⃣️ code split"></a>6⃣️ code split</h5><ul><li><p>多入口情况</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** webpack.config.js**/</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// css 代码压缩</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 多入口文件</span>    main<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    page<span class="token punctuation">:</span> <span class="token string">'./src/page.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[chunkhash:10].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>      minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 可以将 node_modules 中代码单独打包成一个chunk最终输出</span>  <span class="token comment" spellcheck="true">// 自动分析多入口 chunk 中，有无公共的文件，如果有，打包成一个单独的chunk</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>      chunks<span class="token punctuation">:</span> <span class="token string">'all'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>单入口情况</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** webpack.config.js**/</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// css 代码压缩</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 单入口</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[chunkhash:10].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>      minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 可以将 node_modules 中代码单独打包成一个chunk最终输出</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>      chunks<span class="token punctuation">:</span> <span class="token string">'all'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 通过 js 代码，让某个文件被单独打包成一个chunk</span><span class="token comment" spellcheck="true">// import 动态导入语法</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: 'test' */</span><span class="token string">'./test.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h5 id="7⃣️-懒加载和预加载"><a href="#7⃣️-懒加载和预加载" class="headerlink" title="7⃣️ 懒加载和预加载"></a>7⃣️ 懒加载和预加载</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 懒加载</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: 'test' */</span><span class="token string">'./test.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>sum <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 预加载：使用之前就将js文件加载好</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: 'test', webpackPrefetch: true */</span><span class="token string">'./test.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>sum <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="8⃣️-PWA-（渐进式网络开发应用程序）"><a href="#8⃣️-PWA-（渐进式网络开发应用程序）" class="headerlink" title="8⃣️ PWA （渐进式网络开发应用程序）"></a>8⃣️ PWA （渐进式网络开发应用程序）</h5><h5 id="9⃣️-多进程打包"><a href="#9⃣️-多进程打包" class="headerlink" title="9⃣️ 多进程打包"></a>9⃣️ 多进程打包</h5><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>    exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// 开启多进程打包</span>        <span class="token comment" spellcheck="true">// 进程启动大概600ms，进程通信也有开销</span>        <span class="token comment" spellcheck="true">// 只有工作消耗时间比较长，才需要</span>        <span class="token comment" spellcheck="true">// 'thread-loader',</span>        <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'thread-loader'</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            workers<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// 进程2个</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">[</span>                <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  useBuiltIns<span class="token punctuation">:</span> <span class="token string">'usage'</span><span class="token punctuation">,</span>                  corejs<span class="token punctuation">:</span> <span class="token punctuation">{</span> version<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    chrome<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                    firefox<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                    ie<span class="token punctuation">:</span> <span class="token string">'9'</span><span class="token punctuation">,</span>                    safari<span class="token punctuation">:</span> <span class="token string">'10'</span><span class="token punctuation">,</span>                    edge<span class="token punctuation">:</span> <span class="token string">'17'</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">]</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            cacheDirectory<span class="token punctuation">:</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i thread-loader -D</code></pre><h5 id="🔟-externals"><a href="#🔟-externals" class="headerlink" title="🔟 externals"></a>🔟 externals</h5><ul><li>配置 externals</li><li>手动在 html 中引入 CDN 链接</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// loader 的配置</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 忽略 jquery 打包</span>    jquery<span class="token punctuation">:</span> <span class="token string">'jQuery'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/1.10.0/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="1⃣️1⃣️-DLL-使用-dll-技术，对某些库进行单独打包：jquery-react-vue-…"><a href="#1⃣️1⃣️-DLL-使用-dll-技术，对某些库进行单独打包：jquery-react-vue-…" class="headerlink" title="1⃣️1⃣️ DLL (使用 dll 技术，对某些库进行单独打包：jquery, react, vue …)"></a>1⃣️1⃣️ DLL (使用 dll 技术，对某些库进行单独打包：jquery, react, vue …)</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * webpack.dll.js */</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    jquery<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dll'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    library<span class="token punctuation">:</span> <span class="token string">'[name]_[hash]'</span>  <span class="token comment" spellcheck="true">// 打包的库里面向外暴露出去的内容叫什么名字</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'[name]_[hash]'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 映射库的暴露的内容名称</span>      path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dll/manifest.json'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出文件路径</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i add-asset-html-webpack-plugin -D</code></pre><pre><code>/*** webpack.config.js**/const webpack = require('webpack')module.exports = {  plugins: [    // 告诉webpack哪些库不参与打包，同时使用时的名称也得变    new webpack.DllReferencePlugin({      manifest: resolve(__dirname, 'dll/manifest.json')    })  ],}</code></pre><h4 id="8-性能优化总结"><a href="#8-性能优化总结" class="headerlink" title="8 性能优化总结"></a>8 性能优化总结</h4><p><img src="https://front-images.oss-cn-hangzhou.aliyuncs.com/i4/d16af595414a625c54e8d249920c6fac-1760-966.png" alt="webpack 性能优化大纲"></p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全</title>
      <link href="posts/45331.html"/>
      <url>posts/45331.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-XSS-攻击"><a href="#1-XSS-攻击" class="headerlink" title="1.  XSS 攻击"></a>1.  XSS 攻击</h4><blockquote><p> XSS 跨站请求攻击</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span></code></pre><ul><li>在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入</li><li>在内联的  JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）</li><li>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签</li><li>在标签的 href、src 等属性中，包含 javascript: 等可执行代码</li><li>在 onload、onerror、onclick 等事件中，注入不受控制代码</li><li>在 style 属性和标签中，包含类似 background-image:url(“javascript:…”); 的代码（新版本浏览器已经可以防范）</li><li>在 style 属性和标签中，包含类似 expression(…) 的 CSS 表达式代码（新版本浏览器已经可以防范）</li><li>一个博客网站，我发表一篇博客，其中嵌入<code>&lt;script&gt;</code>脚本，脚本内容：获取cookie，发送到我的服务器（服务器配合跨域）阅读了的人的cookie就会被盗取</li></ul><blockquote><p> XSS 预防</p></blockquote><ul><li>替换特殊字符，如 <code>&lt; </code>变为 <code>&amp;lt;</code> ，<code>&gt; </code> 变为 <code>&amp;gt;</code></li><li>那么 <code>&lt;script&gt;</code> 就会变为<code>$lt;script&amp;gt;</code> ，直接显示，而不会作为脚本执行</li><li>前端要替换，后端也要做替换，双保险</li><li>主流的前端框架已做好预防</li></ul><h4 id="2-XSRF攻击"><a href="#2-XSRF攻击" class="headerlink" title="2. XSRF攻击"></a>2. XSRF攻击</h4><blockquote><p>XSRF跨站请求伪装</p></blockquote><blockquote><p>XSRF攻击场景</p></blockquote><ul><li>你正在购物，看中了某个商品，商品id是100。付费接口是<code>xxx.com/pay?id=100</code>，但没有任何验证（现在的付费都会有验证，这里作为讲解，所以假设没有验证）。我是攻击者，我看中了一个商品，id是200。我想你发送了一封电子邮件，邮件标题很吸引人。但其实邮件正文隐藏着<code>&lt;img src='xxx.com/pay?id=200'&gt;</code>（并附带有别的执行付费脚本）你点击查看了这封邮件，就帮我购买了id是200的商品。</li></ul><blockquote><p>XSRF预防</p></blockquote><ul><li>使用post接口</li><li>增加验证，例如密码、短信验证码、指纹等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解一下 HTTP 发展历程吧</title>
      <link href="posts/a8e7.html"/>
      <url>posts/a8e7.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、HTTP-起源"><a href="#一、HTTP-起源" class="headerlink" title="一、HTTP 起源"></a>一、HTTP 起源</h1><blockquote><p>HTTP 协议始于三十年前蒂姆·伯纳斯 - 李的一篇论文</p></blockquote><h3 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h3><blockquote><p>简单的文本协议，只能获取文本资源</p></blockquote><ol><li>URI：统一资源标识符，作为互联网上资源的唯一身份；</li><li>HTML：超文本标记语言，描述超文本文档；</li><li>HTTP：超文本传输协议，用来传输超文本。</li></ol><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h3><blockquote><p>确立了大部分现在使用的技术，但不是正式标准</p></blockquote><ol><li>增加了 HEAD、POST 等新方法；</li><li>增加了响应状态码，标记可能等错误原因；</li><li>引入了协议版本号概念；</li><li>引入了 HTTP Header 的概念，让 HTTP 处理请求喝想要更加灵活；</li><li>传输的数据不再仅限于文本。</li></ol><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><blockquote><p>是目前互联网上使用最广泛的协议，功能也非常完善</p></blockquote><ol><li>增加了 PUT、DELETE 等新方法；</li><li>增加了缓存管理和控制；</li><li>明确了链接管理，允许持久连接；</li><li>允许响应数据分块（chunked），利于传输大文件；</li><li>强制要求 Host 头，让互联网逐主机管称为可能。</li></ol><h3 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h3><blockquote><p>基于 Google 的 SPDY 协议，注重性能改善，但还未普及</p></blockquote><ol><li>二进制协议，不再是纯文本；</li><li>可发起多个请求，废弃了 1.1 里的管道；</li><li>使用专用算法压缩头部，减少数据传输量；</li><li>允许服务器主动向客户端推送数据；</li><li>增强了安全性，“事实上”要求加密通信。</li></ol><h3 id="HTTP-3-0"><a href="#HTTP-3-0" class="headerlink" title="HTTP/3.0"></a>HTTP/3.0</h3><blockquote><p>基于 Google 的 QUIC 协议，是将来的发展方向</p></blockquote><h1 id="二、HTTP-是什么？"><a href="#二、HTTP-是什么？" class="headerlink" title="二、HTTP 是什么？"></a>二、HTTP 是什么？</h1><blockquote><p>超文本传输协议</p></blockquote><ol><li>超文本：它是文字、图片、音频和视频等的混合体</li><li>超链接：从一个超文本跳跃到另一个超文本，形成复杂的非线性、网状的结构关系</li><li>传输：在两点之间传输数据，不能用于广播、寻址或路由</li><li>协议：确立了一种计算机之间交流通信的规范，以及香港的各种控制和错误处理方式</li></ol><h1 id="三、HTTP-相关的各种概念"><a href="#三、HTTP-相关的各种概念" class="headerlink" title="三、HTTP 相关的各种概念"></a>三、HTTP 相关的各种概念</h1><ol><li><code>CDN</code>：内容分发网络，应用了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求，主要起到缓存加速的作用；</li><li><code>WAF</code>：网络应用防火墙，应用层面的‘防火墙’，专门检测 HTTP 流量，是防护 Web 应用的安全技术；</li><li>爬虫是另一类 User Agent ，是自动访问网络资源的程序；</li><li><code>Web Service</code>：由 W3C 定义的应用服务开发规范，使用 client-server 主从架构；</li><li>浏览器是 HTTP 协议里的请求方，即 User Agent；</li><li>服务器是 HTTP 协议里的应答方，常用的有 Apache 和 Nginx。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
